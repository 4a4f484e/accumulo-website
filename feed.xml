<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache Accumulo™</title>
    <description>The Apache Accumulo™ sorted, distributed key/value store is a robust, scalable, high performance data storage and retrieval system.
</description>
    <link>https://accumulo.apache.org/</link>
    <atom:link href="https://accumulo.apache.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 22 Nov 2016 18:27:31 -0500</pubDate>
    <lastBuildDate>Tue, 22 Nov 2016 18:27:31 -0500</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>Simpler scripts and configuration coming in Accumulo 2.0.0</title>
        <description>&lt;p&gt;For the upcoming 2.0.0 release, Accumulo’s scripts and configuration &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4490&quot;&gt;were refactored&lt;/a&gt;
to make Accumulo easier to use. While Accumulo’s documentation (i.e. the user
manual and &lt;a href=&quot;https://github.com/apache/accumulo/blob/master/INSTALL.md&quot;&gt;INSTALL.md&lt;/a&gt;) were updated with any changes that were made, this blog post provides
a summary of the changes.&lt;/p&gt;

&lt;h3 id=&quot;fewer-scripts&quot;&gt;Fewer scripts&lt;/h3&gt;

&lt;p&gt;Before 2.0.0, the &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/&lt;/code&gt; directory of Accumulo’s binary tarball contained about 20 scripts:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls accumulo-1.8.0/bin/
accumulo             build_native_library.sh  generate_monitor_certificate.sh  start-here.sh    stop-server.sh
accumulo_watcher.sh  check-slaves             LogForwarder.sh                  start-server.sh  tdown.sh
bootstrap_config.sh  config-server.sh         start-all.sh                     stop-all.sh      tool.sh
bootstrap_hdfs.sh    config.sh                start-daemon.sh                  stop-here.sh     tup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The number of scripts made it difficult to know which scripts to use.  If you added the &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/&lt;/code&gt; directory to your 
&lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;, it could add unecessary commands to your PATH or cause commands to be overriden due generic names
(like ‘start-all.sh’). The number of scripts were reduced using the following methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scripts that are only called by other scripts were moved to a new &lt;code class=&quot;highlighter-rouge&quot;&gt;libexec/&lt;/code&gt; directory in the Accumulo binary tarball&lt;/li&gt;
  &lt;li&gt;Scripts with similiar functionality were combined&lt;/li&gt;
  &lt;li&gt;Extra/optional scripts were move to a new &lt;code class=&quot;highlighter-rouge&quot;&gt;contrib/&lt;/code&gt; directory in the binary tarball&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting with 2.0.0, Accumulo will only have 3 scripts in its &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/&lt;/code&gt; directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls accumulo-2.0.0/bin/
accumulo  accumulo-cluster  accumulo-service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Below are some notes on this change:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The ‘accumulo’ script was left alone except for improved usage and the addition of ‘create-config’ and ‘build-native’
commands to replace ‘bootstrap_config.sh’ and ‘build_native_library.sh’.&lt;/li&gt;
  &lt;li&gt;The ‘accumulo-service’ script was created to manage Accumulo processes as services&lt;/li&gt;
  &lt;li&gt;The ‘accumulo-cluster’ command was created to manage Accumulo on cluster and replaces ‘start-all.sh’ and ‘stop-all.sh’.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All optional scripts in &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/&lt;/code&gt; were moved to &lt;code class=&quot;highlighter-rouge&quot;&gt;contrib/&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls accumulo-2.0.0/contrib/
bootstrap-hdfs.sh  check-tservers  gen-monitor-cert.sh  tool.sh
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;less-configuration&quot;&gt;Less configuration&lt;/h3&gt;

&lt;p&gt;Before 2.0.0, Accumulo’s &lt;code class=&quot;highlighter-rouge&quot;&gt;conf/&lt;/code&gt; directory looked like the following (after creating initial config files
using ‘bootstrap_config.sh’):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls accumulo-1.8.0/conf/
accumulo-env.sh          auditLog.xml  generic_logger.properties            masters                    slaves
accumulo-metrics.xml     client.conf   generic_logger.xml                   monitor                    templates
accumulo.policy.example  examples      hadoop-metrics2-accumulo.properties  monitor_logger.properties  tracers
accumulo-site.xml        gc            log4j.properties                     monitor_logger.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;While all of these files have a purpose, many are only used in rare situations. Therefore, the
‘accumulo create-config’ (which replaces ‘bootstrap_config.sh’) now only generates a minimum
set of configuration files needed to run Accumulo.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;accumulo-2.0.0
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./bin/accumulo create-config
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls conf/
accumulo-env.sh  accumulo-site.xml  client.conf  examples
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The ‘accumulo create-config’ command does not generate host files (i.e ‘tservers’, ‘monitor’, etc) to run processes locally.
These files are only required by the ‘accumulo-cluster’ command which has a command to generate them.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;accumulo-2.0.0/
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./bin/accumulo-cluster create-config
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls conf/
accumulo-env.sh  accumulo-site.xml  client.conf  examples  gc  masters  monitor  tracers  tservers
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Any less common configuration files that were not generated above can still be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;conf/examples&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;better-usage&quot;&gt;Better usage&lt;/h3&gt;

&lt;p&gt;Before 2.0.0, the ‘accumulo’ command had a limited usage:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./accumulo-1.8.0/bin/accumulo
accumulo admin | check-server-config | classpath | create-token | gc | help | info | init | jar &amp;lt;jar&amp;gt; [&amp;lt;main class&amp;gt;] args |
  login-info | master | minicluster | monitor | proxy | rfile-info | shell | tracer | tserver | version | zookeeper | &amp;lt;accumulo class&amp;gt; args
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For 2.0.0, all ‘accumulo’ commands were given a short description and organized into the groups.  Below is
the full usage. It should be noted that usage is limited until the ‘accumulo-env.sh’ configuration file is
created in &lt;code class=&quot;highlighter-rouge&quot;&gt;conf/&lt;/code&gt; by the &lt;code class=&quot;highlighter-rouge&quot;&gt;accumulo create-config&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./accumulo-2.0.0/bin/accumulo help

Usage: accumulo &amp;lt;command&amp;gt; (&amp;lt;argument&amp;gt; ...)

Core Commands:
  create-config                  Creates Accumulo configuration
  build-native                   Builds Accumulo native libraries
  init                           Initializes Accumulo
  shell                          Runs Accumulo shell
  classpath                      Prints Accumulo classpath
  version                        Prints Accumulo version
  admin                          Executes administrative commands
  info                           Prints Accumulo cluster info
  help                           Prints usage
  jar &amp;lt;jar&amp;gt; [&amp;lt;main class&amp;gt;] args  Runs Java &amp;lt;main class&amp;gt; in &amp;lt;jar&amp;gt; using Accumulo classpath
  &amp;lt;main class&amp;gt; args              Runs Java &amp;lt;main class&amp;gt; located on Accumulo classpath

Process Commands:
  gc                             Starts Accumulo garbage collector
  master                         Starts Accumulo master
  monitor                        Starts Accumulo monitor
  minicluster                    Starts Accumulo minicluster
  proxy                          Starts Accumulo proxy
  tserver                        Starts Accumulo tablet server
  tracer                         Starts Accumulo tracer
  zookeeper                      Starts Apache Zookeeper instance

Advanced Commands:
  check-server-config            Checks server config
  create-token                   Creates authentication token
  login-info                     Prints Accumulo login info
  rfile-info                     Prints rfile info
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The new ‘accumulo-service’ and ‘accumulo-cluster’ commands also have informative usage.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./accumulo-2.0.0/bin/accumulo-service 

Usage: accumulo-service &amp;lt;service&amp;gt; &amp;lt;command&amp;gt;

Services:
  gc          Accumulo garbage collector
  monitor     Accumulo monitor
  master      Accumulo master
  tserver     Accumulo tserver
  tracer      Accumulo tracter

Commands:
  start       Starts service
  stop        Stops service
  kill        Kills service

$ ./accumulo-2.0.0/bin/accumulo-cluster 

Usage: accumulo-cluster &amp;lt;command&amp;gt; (&amp;lt;argument&amp;gt; ...)

Commands:
  create-config   Creates cluster config
  start           Starts Accumulo cluster
  stop            Stops Accumulo cluster
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 16 Nov 2016 00:00:00 -0500</pubDate>
        <link>https://accumulo.apache.org/blog/2016/11/16/simpler-scripts-and-config.html</link>
        <guid isPermaLink="true">https://accumulo.apache.org/blog/2016/11/16/simpler-scripts-and-config.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Durability Performance Implications</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Accumulo stores recently written data in a sorted in memory map.  Before data is
added to this map, it’s written to an unsorted write ahead log(WAL).  In the
case when a tablet server dies, the recently written data is recovered from the
WAL.&lt;/p&gt;

&lt;p&gt;When data is written to Accumulo the following happens :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Client sends a batch of mutations to a tablet server&lt;/li&gt;
  &lt;li&gt;Tablet server does the following :
    &lt;ul&gt;
      &lt;li&gt;Writes mutation to tablet servers’ WAL&lt;/li&gt;
      &lt;li&gt;Sync or flush tablet servers’ WAL&lt;/li&gt;
      &lt;li&gt;Adds mutations to sorted in memory map of each tablet.&lt;/li&gt;
      &lt;li&gt;Reports success back to client.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sync/flush step above moves data written to the WAL from memory to disk.
Write ahead logs are stored in HDFS. HDFS supports two ways of forcing data to
disk for an open file : &lt;code class=&quot;highlighter-rouge&quot;&gt;hsync&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hflush&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;hdfs-syncflush-details&quot;&gt;HDFS Sync/Flush Details&lt;/h2&gt;

&lt;p&gt;When &lt;code class=&quot;highlighter-rouge&quot;&gt;hflush&lt;/code&gt; is called on a WAL, it does not guarantee data is on disk.  It
only guarantees that data is in OS buffers on each datanode and on its way to disk.
As a result calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;hflush&lt;/code&gt; are very fast.  If a WAL is replicated to 3 data
nodes then data may be lost if all three machines reboot or die.  If the datanode
process dies, then data loss will not happen because the data was in OS buffers
waiting to be written to disk.  The machines have to reboot or die for data loss to
occur.&lt;/p&gt;

&lt;p&gt;In order to avoid data loss in the event of reboot, &lt;code class=&quot;highlighter-rouge&quot;&gt;hsync&lt;/code&gt; can be called.  This
will ensure data is written to disk on all datanodes before returning.  When
using &lt;code class=&quot;highlighter-rouge&quot;&gt;hsync&lt;/code&gt; for the WAL, if Accumulo reports success to a user it means the
data is on disk.  However &lt;code class=&quot;highlighter-rouge&quot;&gt;hsync&lt;/code&gt; is much slower than &lt;code class=&quot;highlighter-rouge&quot;&gt;hflush&lt;/code&gt; and the way it’s
implemented exacerbates the problem.  For example &lt;code class=&quot;highlighter-rouge&quot;&gt;hflush&lt;/code&gt; make take 1ms and
&lt;code class=&quot;highlighter-rouge&quot;&gt;hsync&lt;/code&gt; may take 50ms.  This difference will impact writes to Accumulo and can
be mitigated in some situations with larger buffers in Accumulo.&lt;/p&gt;

&lt;p&gt;HDFS keeps checksum data internally by default.  Datanodes store checksum data
in a separate file in the local filesystem.  This means when &lt;code class=&quot;highlighter-rouge&quot;&gt;hsync&lt;/code&gt; is called
on a WAL, two files must be synced on each datanode.  Syncing two files doubles
the time. To make matters even worse, when the two files are synced the local
filesystem metadata is also synced.  Depending on the local filesystem and its
configuration, syncing the metadata may or may not take time.  In the worst
case, we need to wait for four sync operations at the local filesystem level on
each datanode. One thing I am not sure about, is if these sync operations occur
in parallel on the replicas on different datanodes.  If anyone can answer this
question, please let us know on the &lt;a href=&quot;/mailing_list&quot;&gt;dev list&lt;/a&gt;. The following pointers show
where sync occurs in the datanode code.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apache/hadoop/blob/release-2.7.1/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java#L358&quot;&gt;BlockReceiver.flushOrSync()&lt;/a&gt; calls &lt;a href=&quot;https://github.com/apache/hadoop/blob/release-2.7.1/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/ReplicaOutputStreams.java#L78&quot;&gt;ReplicaOutputStreams.syncDataOut()&lt;/a&gt; and &lt;a href=&quot;https://github.com/apache/hadoop/blob/release-2.7.1/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/ReplicaOutputStreams.java#L87&quot;&gt;ReplicaOutputStreams.syncChecksumOut()&lt;/a&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;isSync&lt;/code&gt; is true.&lt;/li&gt;
  &lt;li&gt;The methods in ReplicaOutputStreams call &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/nio/channels/FileChannel.html#force-boolean-&quot;&gt;FileChannel.force(true)&lt;/a&gt; which
synchronously flushes data and filesystem metadata.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If files were preallocated (this would avoid syncing local filesystem metadata)
and checksums were stored in-line, then 1 sync could be done instead of 4.&lt;/p&gt;

&lt;h2 id=&quot;configuring-wal-flushsync-in-accumulo-16&quot;&gt;Configuring WAL flush/sync in Accumulo 1.6&lt;/h2&gt;

&lt;p&gt;Accumulo 1.6.0 only supported &lt;code class=&quot;highlighter-rouge&quot;&gt;hsync&lt;/code&gt; and this caused &lt;a href=&quot;/release/accumulo-1.6.0#slower-writes-than-previous-accumulo-versions&quot;&gt;performance
problems&lt;/a&gt;.  In order to offer better performance, the option to
configure &lt;code class=&quot;highlighter-rouge&quot;&gt;hflush&lt;/code&gt; was &lt;a href=&quot;/release/accumulo-1.6.1#write-ahead-log-sync-implementation&quot;&gt;added in 1.6.1&lt;/a&gt;.  The
&lt;a href=&quot;/1.6/accumulo_user_manual#_tserver_wal_sync_method&quot;&gt;tserver.wal.sync.method&lt;/a&gt; configuration option was added to support
this feature.  This was a tablet server wide option that applied to everything
written to any table.&lt;/p&gt;

&lt;h2 id=&quot;group-commit&quot;&gt;Group Commit&lt;/h2&gt;

&lt;p&gt;Each Accumulo tablet server has a single WAL.  When multiple clients send
mutations to a tablet server at around the same time, the tablet sever may group
all of this into a single WAL operation.  It will do this instead of writing and
syncing or flushing each client’s mutations to the WAL separately.  Doing this
increase throughput and lowers average latency for clients.&lt;/p&gt;

&lt;h2 id=&quot;configuring-wal-flushsync-in-accumulo-17&quot;&gt;Configuring WAL flush/sync in Accumulo 1.7+&lt;/h2&gt;

&lt;p&gt;Accumulo 1.7.0 introduced &lt;a href=&quot;/1.7/accumulo_user_manual#_table_durability&quot;&gt;table.durability&lt;/a&gt;, a new per table property
for configuring durability.  It also stopped using the &lt;code class=&quot;highlighter-rouge&quot;&gt;tserver.wal.sync.method&lt;/code&gt;
property.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;table.durability&lt;/code&gt; property has the following four legal values.
This property defaults to the most durable option which is &lt;code class=&quot;highlighter-rouge&quot;&gt;sync&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;none&lt;/strong&gt; : Do not write to WAL&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;log&lt;/strong&gt;  : Write to WAL, but do not sync&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;flush&lt;/strong&gt; : Write to WAL and call &lt;code class=&quot;highlighter-rouge&quot;&gt;hflush&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sync&lt;/strong&gt; : Write to WAL and call &lt;code class=&quot;highlighter-rouge&quot;&gt;hsync&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If multiple writes arrive at around the same time with different durability
settings, then the group commit code will choose the most durable.  This can
cause one tables settings to slow down writes to another table.  Basically, one
table that is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;sync&lt;/code&gt; can impact the entire system.&lt;/p&gt;

&lt;p&gt;In Accumulo 1.6, it was easy to make all writes use &lt;code class=&quot;highlighter-rouge&quot;&gt;hflush&lt;/code&gt; because there was
only one tserver setting.  Getting everything to use &lt;code class=&quot;highlighter-rouge&quot;&gt;flush&lt;/code&gt; in 1.7 and later
can be a little tricky because by default the Accumulo metadata table is set to
use &lt;code class=&quot;highlighter-rouge&quot;&gt;sync&lt;/code&gt;.  The following shell commands show this. The first command sets
&lt;code class=&quot;highlighter-rouge&quot;&gt;table.durability=flush&lt;/code&gt; as a system wide default for all tables.  However, the
metadata table is still set to &lt;code class=&quot;highlighter-rouge&quot;&gt;sync&lt;/code&gt;, because it has a per table override for
that setting.  This override is set when Accumulo is initialized.  To get this
table to use &lt;code class=&quot;highlighter-rouge&quot;&gt;flush&lt;/code&gt;, the per table override must be deleted.  After deleting
those properties, the metadata tables will inherit the system wide setting.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@uno&amp;gt; config -s table.durability=flush
root@uno&amp;gt; createtable foo
root@uno foo&amp;gt; config -t foo -f table.durability
-----------+---------------------+----------------------------------------------
SCOPE      | NAME                | VALUE
-----------+---------------------+----------------------------------------------
default    | table.durability .. | sync
system     |    @override ...... | flush
-----------+---------------------+----------------------------------------------
root@uno&amp;gt; config -t accumulo.metadata -f table.durability
-----------+---------------------+----------------------------------------------
SCOPE      | NAME                | VALUE
-----------+---------------------+----------------------------------------------
default    | table.durability .. | sync
system     |    @override ...... | flush
table      |    @override ...... | sync
-----------+---------------------+----------------------------------------------
root@uno&amp;gt; config -t accumulo.metadata -d table.durability
root@uno&amp;gt; config -t accumulo.metadata -f table.durability
-----------+---------------------+----------------------------------------------
SCOPE      | NAME                | VALUE
-----------+---------------------+----------------------------------------------
default    | table.durability .. | sync
system     |    @override ...... | flush
-----------+---------------------+----------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In short, executing the following commands will make all writes use &lt;code class=&quot;highlighter-rouge&quot;&gt;flush&lt;/code&gt;
(assuming no other tables or namespaces have been specifically set to &lt;code class=&quot;highlighter-rouge&quot;&gt;sync&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config -s table.durability=flush
config -t accumulo.metadata -d table.durability
config -t accumulo.root -d table.durability
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Even with these settings adjusted, minor compactions could still force &lt;code class=&quot;highlighter-rouge&quot;&gt;hsync&lt;/code&gt;
to be called in 1.7.0 and 1.7.1.  This was fixed in 1.7.2 and 1.8.0.  See the
&lt;a href=&quot;/release/accumulo-1.7.2#minor-performance-improvements&quot;&gt;1.7.2 release notes&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4112&quot;&gt;ACCUMULO-4112&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;In addition to the per table durability setting, a per batch writer durability
setting was also added in 1.7.0.  See
&lt;a href=&quot;/1.8/apidocs/org/apache/accumulo/core/client/BatchWriterConfig.html#setDurability(org.apache.accumulo.core.client.Durability)&quot;&gt;BatchWriterConfig.setDurability(…)&lt;/a&gt;.  This means any client could
potentially cause a &lt;code class=&quot;highlighter-rouge&quot;&gt;hsync&lt;/code&gt; operation to occur, even if the system is
configured to use &lt;code class=&quot;highlighter-rouge&quot;&gt;hflush&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improving-the-situation&quot;&gt;Improving the situation&lt;/h2&gt;

&lt;p&gt;The more granular durability settings introduced in 1.7.0 can cause some
unexpected problems.  &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4146&quot;&gt;ACCUMULO-4146&lt;/a&gt; suggests one possible way to solve these
problems with Per-durability write ahead logs.&lt;/p&gt;

</description>
        <pubDate>Wed, 02 Nov 2016 13:00:00 -0400</pubDate>
        <link>https://accumulo.apache.org/blog/2016/11/02/durability-performance.html</link>
        <guid isPermaLink="true">https://accumulo.apache.org/blog/2016/11/02/durability-performance.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Accumulo 1.6.6</title>
        <description>&lt;p&gt;Apache Accumulo 1.6.6 is a maintenance release on the 1.6 version branch. This
release contains changes from more than 40 issues, comprised of bug-fixes,
performance improvements, build quality improvements, and more. See
&lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12312121&amp;amp;version=12334846&quot;&gt;JIRA&lt;/a&gt; for a complete list.&lt;/p&gt;

&lt;p&gt;Below are resources for this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/1.6/accumulo_user_manual.html&quot;&gt;User Manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.6/apidocs&quot;&gt;Javadocs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.6/examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Users of any previous 1.6.x release are strongly encouraged to update as soon
as possible to benefit from the improvements with very little concern in change
of underlying functionality.&lt;/p&gt;

&lt;p&gt;As of this release, active development has ceased for the 1.6 release line, so
users should consider upgrading to a newer, actively maintained version when
they can. While the developers may release another 1.6 version to address a
severe issue, there’s a strong possibility that this will be the last 1.6
release. That would also mean that this will be the last Accumulo version to
support Java 6 and Hadoop 1.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;h3 id=&quot;write-ahead-logs-can-be-prematurely-deleted&quot;&gt;Write-Ahead Logs can be prematurely deleted&lt;/h3&gt;

&lt;p&gt;There were cases where the Accumulo Garbage Collector may inadvertently delete
a WAL for a tablet server that it has erroneously determined to be down,
causing data loss. This has been corrected. See &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4157&quot;&gt;ACCUMULO-4157&lt;/a&gt;
for additional detail.&lt;/p&gt;

&lt;h3 id=&quot;upgrade-to-commons-vfs-21&quot;&gt;Upgrade to Commons-VFS 2.1&lt;/h3&gt;

&lt;p&gt;Upgrading to Apache Commons VFS 2.1 fixes several issues with classloading out
of HDFS. For further detail see &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4146&quot;&gt;ACCUMULO-4146&lt;/a&gt;. Additional
fixes to a potential HDFS class loading deadlock situation were made in
&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4341&quot;&gt;ACCUMULO-4341&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;native-map-failed-to-increment-mutation-count-properly&quot;&gt;Native Map failed to increment mutation count properly&lt;/h3&gt;

&lt;p&gt;There was a bug (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4148&quot;&gt;ACCUMULO-4148&lt;/a&gt;) where multiple put calls with
identical keys and no timestamp would exhibit different behaviour depending on
whether native maps were enabled or not. This behaviour would result in hidden
mutations with native maps, and has been corrected.&lt;/p&gt;

&lt;h3 id=&quot;open-wal-files-could-prevent-datanode-decomission&quot;&gt;Open WAL files could prevent DataNode decomission&lt;/h3&gt;

&lt;p&gt;An improvement was introduced to allow a max age before WAL files would be
automatically rolled. Without a max age, they could stay open for writing
indefinitely, blocking the Hadoop DataNode decomissioning process. For more
information, see &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4004&quot;&gt;ACCUMULO-4004&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;remove-unnecessary-copy-of-cached-rfile-index-blocks&quot;&gt;Remove unnecessary copy of cached RFile index blocks&lt;/h3&gt;

&lt;p&gt;Accumulo maintains an cache for file blocks in-memory as a performance
optimization. This can be done safely because Accumulo RFiles are immutable,
thus their blocks are also immutable. There are two types of these blocks:
index and data blocks. Index blocks refer to the b-tree style index inside of
each Accumulo RFile, while data blocks contain the sorted Key-Value pairs. In
previous versions, when Accumulo extracted an Index block from the in-memory
cache, it would copy the data. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4164&quot;&gt;ACCUMULO-4164&lt;/a&gt; removes this
unnecessary copy as the contents are immutable and can be passed by reference.
Ensuring that the Index blocks are not copied when accessed from the cache is a
big performance gain at the file-access level.&lt;/p&gt;

&lt;h3 id=&quot;analyze-key-length-to-avoid-choosing-large-keys-for-rfile-index-blocks&quot;&gt;Analyze Key-length to avoid choosing large Keys for RFile Index blocks&lt;/h3&gt;

&lt;p&gt;Accumulo’s RFile index blocks are made up of a Key which exists in the file and
points to that specific location in the corresponding RFile data block. Thus,
the size of the RFile index blocks is largely dominated by the size of the Keys
which are used by the index. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4314&quot;&gt;ACCUMULO-4314&lt;/a&gt; is an improvement
which uses statistics on the length of the Keys in the Rfile to avoid choosing
Keys for the index whose length is greater than three standard deviations for
the RFile. By choosing smaller Keys for the index, Accumulo can access the
RFile index faster and keep more Index blocks cached in memory. Initial tests
showed that with this change, the RFile index size was nearly cut in half.&lt;/p&gt;

&lt;h3 id=&quot;gson-version-bump&quot;&gt;Gson version bump&lt;/h3&gt;

&lt;p&gt;Due to an &lt;a href=&quot;https://github.com/google/gson/issues/362&quot;&gt;upstream bug with Gson 2.2.2&lt;/a&gt;, we’ve bumped our bundled
dependency (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4345&quot;&gt;ACCUMULO-4345&lt;/a&gt;) to version 2.2.4. Please take note
of this when you upgrade, if you were using the version shipped with Accumulo,
and were relying on the buggy behavior in the previous version in your own
code.&lt;/p&gt;

&lt;h3 id=&quot;minor-performance-improvements&quot;&gt;Minor performance improvements.&lt;/h3&gt;

&lt;p&gt;A performance issue was identified and corrected
(&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-1755&quot;&gt;ACCUMULO-1755&lt;/a&gt;) where the BatchWriter would block calls to
addMutation while looking up destination tablet server metadata. The writer has
been fixed to allow both operations in parallel.&lt;/p&gt;

&lt;h2 id=&quot;other-notable-changes&quot;&gt;Other Notable Changes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4155&quot;&gt;ACCUMULO-4155&lt;/a&gt; No longer publish javadoc for non-public API
to website. (Still available in javadoc jars in maven)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4334&quot;&gt;ACCUMULO-4334&lt;/a&gt; Ingest rates reported through JMX did not
match rates reported by Monitor.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4335&quot;&gt;ACCUMULO-4335&lt;/a&gt; Error conditions that result in a Halt should
ensure non-zero process exit code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;Each unit and functional test only runs on a single node, while the RandomWalk
and Continuous Ingest tests run on any number of nodes. &lt;em&gt;Agitation&lt;/em&gt; refers to
randomly restarting Accumulo processes and Hadoop Datanode processes, and, in
HDFS High-Availability instances, forcing NameNode failover.&lt;/p&gt;

&lt;table id=&quot;release_notes_testing&quot; class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;OS/Environment&lt;/th&gt;
      &lt;th&gt;Hadoop&lt;/th&gt;
      &lt;th&gt;Nodes&lt;/th&gt;
      &lt;th&gt;ZooKeeper&lt;/th&gt;
      &lt;th&gt;HDFS HA&lt;/th&gt;
      &lt;th&gt;Tests&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS 7&lt;/td&gt;
      &lt;td&gt;1.2.1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3.3.6&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Unit tests and Integration Tests&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS 7&lt;/td&gt;
      &lt;td&gt;2.2.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3.3.6&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Unit tests and Integration Tests&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Sun, 18 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://accumulo.apache.org/release/accumulo-1.6.6/</link>
        <guid isPermaLink="true">https://accumulo.apache.org/release/accumulo-1.6.6/</guid>
        
        
        <category>release</category>
        
      </item>
    
      <item>
        <title>Apache Accumulo 1.8.0</title>
        <description>&lt;p&gt;Apache Accumulo 1.8.0 is a significant release that includes many important
milestone features which expand the functionality of Accumulo. These include
features related to security, availability, and extensibility. Over
350 JIRA issues were resolved in this version. This includes over
200 bug fixes and 71 improvements and 4 new features. See &lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12312121&amp;amp;version=12329879&quot;&gt;JIRA&lt;/a&gt;
for the complete list.&lt;/p&gt;

&lt;p&gt;Below are resources for this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/1.8/accumulo_user_manual.html&quot;&gt;User Manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.8/apidocs&quot;&gt;Javadocs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.8/examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the context of Accumulo’s &lt;a href=&quot;http://semver.org&quot;&gt;Semantic Versioning&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/accumulo/blob/1.8/README.md#api&quot;&gt;guidelines&lt;/a&gt;,
this is a “minor version”. This means that new APIs have been created, some
deprecations may have been added, but no deprecated APIs have been removed.
Code written against 1.7.x should work against 1.8.0 – binary compatibility
has been preserved with one exception of an already-deprecated Mock Accumulo
utility class. As always, the Accumulo developers take API compatibility
very seriously and have invested much time to ensure that we meet the promises set forth to our users.&lt;/p&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major Changes&lt;/h2&gt;

&lt;h3 id=&quot;speed-up-wal-roll-overs&quot;&gt;Speed up WAL roll overs&lt;/h3&gt;

&lt;p&gt;Performance of writing mutations is improved by refactoring the
bookeeping required for Write-Ahead Log (WAL) files and by creating a
standby WAL for faster switching when the log is full. This was a
substantial refactor in the way WALs worked, but smoothes overall
ingest performance in addition to provides a increase in write speed
as shown by the simple test below. The top entry is before
&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3423&quot;&gt;ACCUMULO-3423&lt;/a&gt; and the bottom graph is after the
refactor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://issues.apache.org/jira/secure/attachment/12705402/WAL-slowdown-graphs.jpg&quot; alt=&quot;Graph of WAL speed up after ACCUMULO-3423&quot; title=&quot;Graph of WAL speed up after ACCUMULO-3423&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;user-level-api-for-rfile&quot;&gt;User level API for RFile&lt;/h3&gt;

&lt;p&gt;Previously the only public API available to write RFiles was via the AccumuloFileOutputFormat. There was no way to read RFiles in the public
API. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4165&quot;&gt;ACCUMULO-4165&lt;/a&gt; exposes a brand new public &lt;a href=&quot;../1.8/apidocs/org/apache/accumulo/core/client/rfile/RFile.html&quot;&gt;API&lt;/a&gt; for reading and writing RFiles as well as cleans up some of the internal APIs.&lt;/p&gt;

&lt;h3 id=&quot;suspend-tablet-assignment-for-rolling-restarts&quot;&gt;Suspend Tablet assignment for rolling restarts&lt;/h3&gt;

&lt;p&gt;When a tablet server dies, Accumulo attempted to reassign the tablets as quickly as possible to maintain availability.
A new configuration property &lt;code class=&quot;highlighter-rouge&quot;&gt;table.suspend.duration&lt;/code&gt; (with a default of zero seconds) now controls how long to wait before reassigning
a tablet from a dead tserver. The property is configurable via the
Accumulo shell, so you can set it, do a rolling restart, and then
set it back to 0. A new state as introduced, TableState.SUSPENDED to support this feature. By default, metadata tablet
reassignment is not suspended, but that can also be changed with the &lt;code class=&quot;highlighter-rouge&quot;&gt;master.metadata.suspendable&lt;/code&gt; property that is false by
default. Root tablet assignment can not be suspended. See &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4353&quot;&gt;ACCUMULO-4353&lt;/a&gt; for more info.&lt;/p&gt;

&lt;h3 id=&quot;run-multiple-tablet-servers-on-one-node&quot;&gt;Run multiple Tablet Servers on one node&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4328&quot;&gt;ACCUMULO-4328&lt;/a&gt; introduces the capability of running multiple tservers on a single node. This is intended for nodes with a large
amounts of memory and/or disk. This feature is disabled by default. There are several related tickets: &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4072&quot;&gt;ACCUMULO-4072&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4331&quot;&gt;ACCUMULO-4331&lt;/a&gt;
and &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4406&quot;&gt;ACCUMULO-4406&lt;/a&gt;. Note that when this is enabled, the names of the log files change. Previous log file names were defined in the
generic_logger.xml as &lt;code class=&quot;highlighter-rouge&quot;&gt;${org.apache.accumulo.core.application}_{org.apache.accumulo.core.ip.localhost.hostname}.log&lt;/code&gt;.
The files will now include the instance id after the application with
&lt;code class=&quot;highlighter-rouge&quot;&gt;${org.apache.accumulo.core.application}_${instance}_${org.apache.accumulo.core.ip.localhost.hostname}.log&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example: tserver_host.domain.com.log will become tserver_1_host.domain.log when multiple TabletServers
are run per host. The same change also applies to the debug logs provided in the example configurations. The log
names do not change if this feature is not used.&lt;/p&gt;

&lt;h3 id=&quot;rate-limiting-major-compactions&quot;&gt;Rate limiting Major Compactions&lt;/h3&gt;

&lt;p&gt;Major Compactions can significantly increase the amount of load on
TabletServers. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4187&quot;&gt;ACCUMULO-4187&lt;/a&gt; restricts the rate at which data is
read and written when performing major compactions. This has a direct
effect on the IO load caused by major compactions with a similar
effect on the CPU utilization. This behavior is controlled by a new
property &lt;code class=&quot;highlighter-rouge&quot;&gt;tserver.compaction.major.throughput&lt;/code&gt; with a defaults of 0B
which disables the rate limiting.&lt;/p&gt;

&lt;h3 id=&quot;table-sampling&quot;&gt;Table Sampling&lt;/h3&gt;

&lt;p&gt;Queryable sample data was added by &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3913&quot;&gt;ACCUMULO-3913&lt;/a&gt;.  This allows users to configure a pluggable
function to generate sample data.  At scan time, the sample data can optionally be scanned.
Iterators also have access to sample data.  Iterators can access all data and sample data, this
allows an iterator to use sample data for query optimizations.  The new user level RFile API
supports writing RFiles with sample data for bulk import.&lt;/p&gt;

&lt;p&gt;A simple configurable sampler function is included with Accumulo.  This sampler uses hashing and
can be configured to use a subset of Key fields.  For example if it was desired to have entire rows
in the sample, then this sampler would be configured to hash+mod the row.   Then when a row is
selected for the sample, all of its columns and all of its updates will be in the sample data.
Another scenario is one in which a document id is in the column qualifier.  In this scenario, one
would either want all data related to a document in the sample data or none.  To achieve this, the
sample could be configured to hash+mod on the column qualifier.  See the sample &lt;a href=&quot;../1.8/examples/sample&quot;&gt;Readme
example&lt;/a&gt; and javadocs on the new APIs for more information.&lt;/p&gt;

&lt;p&gt;For sampling to work, all tablets scanned must have pre-generated sample data that was generated in
the same way.  If this is not the case then scans will fail.  For existing tables, samples can be
generated by configuring sampling on the table and compacting the table.&lt;/p&gt;

&lt;h3 id=&quot;upgrade-to-apache-thrift-093&quot;&gt;Upgrade to Apache Thrift 0.9.3&lt;/h3&gt;

&lt;p&gt;Accumulo relies on Apache Thrift to implement remote procedure calls
between Accumulo services. Ticket &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4077&quot;&gt;ACCUMULO-4077&lt;/a&gt;
updates our dependency to 0.9.3. See the
&lt;a href=&quot;https://github.com/apache/thrift/blob/0.9.3/CHANGES&quot;&gt;Apache Thrift 0.9.3 Release Notes&lt;/a&gt; for details on
the changes to Thrift.  &lt;strong&gt;NOTE:&lt;/strong&gt; The Thrift 0.9.3 Java library is not
compatible other versions of Thrift. Applications running against Accumulo
1.8 must use Thrift 0.9.3. Different versions of Thrift on the classpath
will not work.&lt;/p&gt;

&lt;h3 id=&quot;iterator-test-harness&quot;&gt;Iterator Test Harness&lt;/h3&gt;

&lt;p&gt;Users often write a new iterator without fully understanding its limits and lifetime. Previously, Accumulo did
not provide any means in which a user could test iterators to catch common issues that only become apparent
in multi-node production deployments. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-626&quot;&gt;ACCUMULO-626&lt;/a&gt; provides a framework and a collection of initial tests
which can be used to simulate common issues with Iterators that only appear in production deployments. This test
harness can be used directly by users as a supplemental tool to unit tests and integration tests with MiniAccumuloCluster.&lt;/p&gt;

&lt;p&gt;Please see the &lt;a href=&quot;../1.8/accumulo_user_manual.html#_iterator_testing&quot;&gt;Accumulo User Manual chapter on Iterator Testing&lt;/a&gt; for more information&lt;/p&gt;

&lt;h3 id=&quot;default-port-for-monitor-changed-to-9995&quot;&gt;Default port for Monitor changed to 9995&lt;/h3&gt;

&lt;p&gt;Previously, the default port for the monitor was 50095. You will need to update your links to point to port 9995. The default
port for the GC process was also changed from 50091 to 9998, although this an RPC port used internally and automatically discovered.
These default ports were changed because the previous defaults fell in the Linux Ephemeral port range. This means that the operating
system, when a port in this range was unusued, would allocate this port for dynamic network communication. This has the side-effect of
temporal bind issues when trying to start these services (as the operating
system might have allocated them elsewhere). By moving these
defaults out of the ephemeral range, we can guarantee that the Monitor and GC
will reliably start. These values are still configurable by setting
&lt;code class=&quot;highlighter-rouge&quot;&gt;monitor.port.client&lt;/code&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;gc.port.client&lt;/code&gt; in the accumulo-site.xml.&lt;/p&gt;

&lt;h2 id=&quot;other-notable-changes&quot;&gt;Other Notable Changes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-1055&quot;&gt;ACCUMULO-1055&lt;/a&gt; Configurable maximum file size for merging minor compactions&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-1124&quot;&gt;ACCUMULO-1124&lt;/a&gt; Optimization of RFile index&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2883&quot;&gt;ACCUMULO-2883&lt;/a&gt; API to fetch current tablet assignments&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3871&quot;&gt;ACCUMULO-3871&lt;/a&gt; Support for running integration tests in MapReduce&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3920&quot;&gt;ACCUMULO-3920&lt;/a&gt; Deprecate the MockAccumulo class and remove usage in our tests&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4339&quot;&gt;ACCUMULO-4339&lt;/a&gt; Make hadoop-minicluster optional dependency of acccumulo-minicluster&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4318&quot;&gt;ACCUMULO-4318&lt;/a&gt; BatchWriter, ConditionalWriter, and ScannerBase now extend AutoCloseable&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4326&quot;&gt;ACCUMULO-4326&lt;/a&gt; Value constructor now accepts Strings (and Charsequences)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4354&quot;&gt;ACCUMULO-4354&lt;/a&gt; Bump dependency versions to include gson, jetty, and sl4j&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3735&quot;&gt;ACCUMULO-3735&lt;/a&gt; Bulk Import status page on the monitor&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4066&quot;&gt;ACCUMULO-4066&lt;/a&gt; Reduced time to processes conditional mutations.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4164&quot;&gt;ACCUMULO-4164&lt;/a&gt; Reduced seek time for cached data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;Each unit and functional test only runs on a single node, while the RandomWalk
and Continuous Ingest tests run on any number of nodes. &lt;em&gt;Agitation&lt;/em&gt; refers to
randomly restarting Accumulo processes and Hadoop Datanode processes, and, in
HDFS High-Availability instances, forcing NameNode failover.&lt;/p&gt;

&lt;table id=&quot;release_notes_testing&quot; class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;OS/Environment&lt;/th&gt;
      &lt;th&gt;Hadoop&lt;/th&gt;
      &lt;th&gt;Nodes&lt;/th&gt;
      &lt;th&gt;ZooKeeper&lt;/th&gt;
      &lt;th&gt;HDFS HA&lt;/th&gt;
      &lt;th&gt;Tests&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS7/openJDK7/EC2; 3 m3.xlarge leaders, 8 d2.xlarge workers&lt;/td&gt;
      &lt;td&gt;2.6.4&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;3.4.8&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;24 HR Continuous Ingest without Agitation.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS7/openJDK7/EC2; 3 m3.xlarge leaders, 8 d2.xlarge workers&lt;/td&gt;
      &lt;td&gt;2.6.4&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;3.4.8&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;16 HR Continuous Ingest with Agitation.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS7/openJDK7/OpenStack VMs (16G RAM 2cores 2disk3; 1 leader, 5 workers&lt;/td&gt;
      &lt;td&gt;HDP 2.5 (Hadoop 2.7)&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;HDP 2.5 (ZK 3.4)&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;24 HR Continuous Ingest without Agitation.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS7/openJDK7/OpenStack VMs (16G RAM 2cores 2disk3; 1 leader, 5 workers&lt;/td&gt;
      &lt;td&gt;HDP 2.5 (Hadoop 2.7)&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;HDP 2.5 (ZK 3.4)&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;24 HR Continuous Ingest with Agitation.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://accumulo.apache.org/release/accumulo-1.8.0/</link>
        <guid isPermaLink="true">https://accumulo.apache.org/release/accumulo-1.8.0/</guid>
        
        
        <category>release</category>
        
      </item>
    
      <item>
        <title>Apache Accumulo 1.7.2</title>
        <description>&lt;p&gt;Apache Accumulo 1.7.2 is a maintenance release on the 1.7 version branch. This
release contains changes from more than 150 issues, comprised of bug-fixes,
performance improvements, build quality improvements, and more. See
&lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12312121&amp;amp;version=12333776&quot;&gt;JIRA&lt;/a&gt; for a complete list.&lt;/p&gt;

&lt;p&gt;Below are resources for this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/1.7/accumulo_user_manual.html&quot;&gt;User Manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.7/apidocs&quot;&gt;Javadocs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.7/examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Users of any previous 1.7.x release are strongly encouraged to update as soon
as possible to benefit from the improvements with very little concern in change
of underlying functionality. Users of 1.6 or earlier that are seeking to
upgrade to 1.7 should consider 1.7.2 as a starting point.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;h3 id=&quot;write-ahead-logs-can-be-prematurely-deleted&quot;&gt;Write-Ahead Logs can be prematurely deleted&lt;/h3&gt;

&lt;p&gt;There were cases where the Accumulo Garbage Collector may inadvertently delete a WAL for a tablet server that it has erroneously determined to be down, causing data loss. This has been corrected. See &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4157&quot;&gt;ACCUMULO-4157&lt;/a&gt; for additional detail.&lt;/p&gt;

&lt;h3 id=&quot;upgrade-to-commons-vfs-21&quot;&gt;Upgrade to Commons-VFS 2.1&lt;/h3&gt;

&lt;p&gt;Upgrading to Apache Commons VFS 2.1 fixes several issues with classloading out of HDFS. For further detail see &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4146&quot;&gt;ACCUMULO-4146&lt;/a&gt;. Additional fixes to a potential HDFS class loading deadlock situation were made in &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4341&quot;&gt;ACCUMULO-4341&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;native-map-failed-to-increment-mutation-count-properly&quot;&gt;Native Map failed to increment mutation count properly&lt;/h3&gt;

&lt;p&gt;There was a bug (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4148&quot;&gt;ACCUMULO-4148&lt;/a&gt;) where multiple put calls with identical keys and no timestamp would exhibit different behaviour depending on whether native maps were enabled or not. This behaviour would result in hidden mutations with native maps, and has been corrected.&lt;/p&gt;

&lt;h3 id=&quot;open-wal-files-could-prevent-datanode-decomission&quot;&gt;Open WAL files could prevent DataNode decomission&lt;/h3&gt;

&lt;p&gt;An improvement was introduced to allow a max age before WAL files would be automatically rolled. Without a max age, they could stay open for writing indefinitely, blocking the Hadoop DataNode decomissioning process. For more information, see &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4004&quot;&gt;ACCUMULO-4004&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;remove-unnecessary-copy-of-cached-rfile-index-blocks&quot;&gt;Remove unnecessary copy of cached RFile index blocks&lt;/h3&gt;

&lt;p&gt;Accumulo maintains an cache for file blocks in-memory as a performance optimization. This can be done safely because Accumulo RFiles are immutable, thus their blocks are also immutable. There are two types of these blocks: index and data blocks. Index blocks refer to the b-tree style index inside of each Accumulo RFile, while data blocks contain the sorted Key-Value pairs. In previous versions, when Accumulo extracted an Index block from the in-memory cache, it would copy the data. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4164&quot;&gt;ACCUMULO-4164&lt;/a&gt; removes this unnecessary copy as the contents are immutable and can be passed by reference. Ensuring that the Index blocks are not copied when accessed from the cache is a big performance gain at the file-access level.&lt;/p&gt;

&lt;h3 id=&quot;analyze-key-length-to-avoid-choosing-large-keys-for-rfile-index-blocks&quot;&gt;Analyze Key-length to avoid choosing large Keys for RFile Index blocks&lt;/h3&gt;

&lt;p&gt;Accumulo’s RFile index blocks are made up of a Key which exists in the file and points to that specific location in the corresponding RFile data block. Thus, the size of the RFile index blocks is largely dominated by the size of the Keys which are used by the index. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4314&quot;&gt;ACCUMULO-4314&lt;/a&gt; is an improvement which uses statistics on the length of the Keys in the Rfile to avoid choosing Keys for the index whose length is greater than three standard deviations for the RFile. By choosing smaller Keys for the index, Accumulo can access the RFile index faster and keep more Index blocks cached in memory. Initial tests showed that with this change, the RFile index size was nearly cut in half.&lt;/p&gt;

&lt;h3 id=&quot;minor-performance-improvements&quot;&gt;Minor performance improvements.&lt;/h3&gt;

&lt;p&gt;Tablet servers would previously always hsync at the start of a minor compaction, causing delays in the write pipeline. These additional syncs were determined to provide no additional durability guarantees and have been removed. See &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4112&quot;&gt;ACCUMULO-4112&lt;/a&gt; for additional detail.&lt;/p&gt;

&lt;p&gt;A performance issue was identified and corrected (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-1755&quot;&gt;ACCUMULO-1755&lt;/a&gt;) where the BatchWriter would block calls to addMutation while looking up destination tablet server metadata. The writer has been fixed to allow both operations in parallel.&lt;/p&gt;

&lt;h2 id=&quot;other-notable-changes&quot;&gt;Other Notable Changes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3923&quot;&gt;ACCUMULO-3923&lt;/a&gt; bootstrap_hdfs.sh script would copy incorrect jars to hdfs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4146&quot;&gt;ACCUMULO-4146&lt;/a&gt; Avoid copy of RFile Index Blocks when already in cache.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4155&quot;&gt;ACCUMULO-4155&lt;/a&gt; No longer publish javadoc for non-public API to website. (Still available in javadoc jars in maven)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4173&quot;&gt;ACCUMULO-4173&lt;/a&gt; Provide balancer to balance table within subset of hosts.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4334&quot;&gt;ACCUMULO-4334&lt;/a&gt; Ingest rates reported through JMX did not match rates reported by Monitor.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4335&quot;&gt;ACCUMULO-4335&lt;/a&gt; Error conditions that result in a Halt should ensure non-zero process exit code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;Each unit and functional test only runs on a single node, while the RandomWalk
and Continuous Ingest tests run on any number of nodes. &lt;em&gt;Agitation&lt;/em&gt; refers to
randomly restarting Accumulo processes and Hadoop Datanode processes, and, in
HDFS High-Availability instances, forcing NameNode failover.&lt;/p&gt;

&lt;table id=&quot;release_notes_testing&quot; class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;OS/Environment&lt;/th&gt;
      &lt;th&gt;Hadoop&lt;/th&gt;
      &lt;th&gt;Nodes&lt;/th&gt;
      &lt;th&gt;ZooKeeper&lt;/th&gt;
      &lt;th&gt;HDFS HA&lt;/th&gt;
      &lt;th&gt;Tests&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS 7; EC2 m3.xlarge, d2.xlarge workers&lt;/td&gt;
      &lt;td&gt;2.6.3&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;3.4.8&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;24 HR Continuous Ingest with and without Agitation.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS 6: EC2 m3.2xlarge&lt;/td&gt;
      &lt;td&gt;2.6.1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3.4.5&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Unit tests and Integration Tests&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Wed, 22 Jun 2016 00:00:00 -0400</pubDate>
        <link>https://accumulo.apache.org/release/accumulo-1.7.2/</link>
        <guid isPermaLink="true">https://accumulo.apache.org/release/accumulo-1.7.2/</guid>
        
        
        <category>release</category>
        
      </item>
    
      <item>
        <title>Apache Accumulo 1.7.1</title>
        <description>&lt;p&gt;Apache Accumulo 1.7.1 is a maintenance release on the 1.7 version branch. This
release contains changes from more than 150 issues, comprised of bug-fixes,
performance improvements, build quality improvements, and more. See
&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO/fixforversion/12329940&quot;&gt;JIRA&lt;/a&gt; for a complete list.&lt;/p&gt;

&lt;p&gt;Below are resources for this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/1.7/accumulo_user_manual.html&quot;&gt;User Manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.7/apidocs&quot;&gt;Javadocs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.7/examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Users of any previous 1.7.x release are strongly encouraged to update as soon
as possible to benefit from the improvements with very little concern in change
of underlying functionality. Users of 1.6 or earlier that are seeking to
upgrade to 1.7 should consider 1.7.1 as a starting point.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;h3 id=&quot;silent-data-loss-via-bulk-imported-files&quot;&gt;Silent data-loss via bulk imported files&lt;/h3&gt;

&lt;p&gt;A user recently reported that a simple bulk-import application would
occasionally lose some records. Through investigation, it was found that when
bulk imports into a table failed the initial assignment, the logic that
automatically retries the imports was incorrectly choosing the tablets to
import the files into. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3967&quot;&gt;ACCUMULO-3967&lt;/a&gt; contains more information
on the cause and identification of the bug. The data-loss condition would only
affect entire files. If records from a file exist in Accumulo, it is still
guaranteed that all records within that imported file were successful.&lt;/p&gt;

&lt;p&gt;As such, users who have bulk import applications using previous versions of
Accumulo should verify that all of their data was correctly ingested into
Accumulo and immediately update to Accumulo 1.7.1 (This is the same bug that
was fixed in 1.6.4, so you won’t be affected if you’re running 1.6.4 or newer).&lt;/p&gt;

&lt;h3 id=&quot;queued-compactions-not-running&quot;&gt;Queued Compactions Not Running&lt;/h3&gt;

&lt;p&gt;Found and fixed a bug (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4016&quot;&gt;ACCUMULO-4016&lt;/a&gt;) in which some queued
compactions would never run if the number of files changed while the tablet was
queued.&lt;/p&gt;

&lt;h3 id=&quot;kerberos-ticket-renewals&quot;&gt;Kerberos Ticket Renewals&lt;/h3&gt;

&lt;p&gt;A bug was fixed which caused Accumulo clients and services to fail to check and
(if necessary) renew their Kerberos credentials. This would eventually lead to
these components failing to properly authenticate until they were restarted.
(&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4069&quot;&gt;ACCUMULO-4069&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;updated-commons-collection&quot;&gt;Updated commons-collection&lt;/h3&gt;

&lt;p&gt;The bundled commons-collection library was updated from version 3.2.1 to 3.2.2
because of a reported vulnerability in that library.
(&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4056&quot;&gt;ACCUMULO-4056&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;faster-processing-of-conditional-mutations&quot;&gt;Faster Processing of Conditional Mutations&lt;/h3&gt;

&lt;p&gt;Improved ConditionalMutation processing time by a factor of 3.
(&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4066&quot;&gt;ACCUMULO-4066&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;slow-gc-while-bulk-importing&quot;&gt;Slow GC While Bulk Importing&lt;/h3&gt;

&lt;p&gt;Found and worked around an issue where lots of bulk imports creating many new
files would significantly impair the Accumulo GC service, and possibly prevent
it from running to completion entirely. (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4021&quot;&gt;ACCUMULO-4021&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;unnoticed-per-table-configuration-updates&quot;&gt;Unnoticed Per-table Configuration Updates&lt;/h3&gt;

&lt;p&gt;Fixed a bug which caused tablet servers to not notice changes to the per-table
constraints, under some circumstances. (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3859&quot;&gt;ACCUMULO-3859&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;tabletservers-kill-themselves-on-centos7&quot;&gt;TabletServers kill themselves on CentOS7&lt;/h3&gt;

&lt;p&gt;Reduced the aggressiveness with which Accumulo Tablet Servers preemptively
killed themselves when a local filesystem switched to read-only (indicating a
possible failure). To reduce false positives, such as those which can occur
with systemd’s extra cgroup mounts in CentOS7, an additional check was added to
ensure that tablet servers would only kill themselves if an ext- or
xfs-formatted disk switched to read-only. (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4080&quot;&gt;ACCUMULO-4080&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;improvements-in-locating-client-configuration-file&quot;&gt;Improvements in Locating Client Configuration File&lt;/h3&gt;

&lt;p&gt;Fixed some unexpected error messages related to setting
ACCUMULO_CLIENT_CONF_PATH, and improved the detection of the client.conf file if
ACCUMULO_CLIENT_CONF_PATH was set to a directory containing client.conf.
(&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4026&quot;&gt;ACCUMULO-4026&lt;/a&gt;,&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4027&quot;&gt;ACCUMULO-4027&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;transient-zookeeper-disconnect-causes-fate-threads-to-exit&quot;&gt;Transient ZooKeeper disconnect causes FATE threads to exit&lt;/h3&gt;

&lt;p&gt;ZooKeeper clients are expected to handle the situation where they become
disconnected from the ZooKeeper server and must wait to be reconnected
before continuing ZooKeeper operations.&lt;/p&gt;

&lt;p&gt;The dedicated threads running inside the Accumulo Master process for FATE
actions had the potential unexpectedly exit in this disconnected state.
This caused a scenario where all future FATE-based operations would
be blocked until the Accumulo Master process was restarted. (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4060&quot;&gt;ACCUMULO-4060&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;incorrect-management-of-certain-apache-thrift-rpcs&quot;&gt;Incorrect management of certain Apache Thrift RPCs&lt;/h3&gt;

&lt;p&gt;Accumulo relies on Apache Thrift to implement remote procedure calls between
Accumulo services. Accumulo’s use of Thrift uncovered an unfortunate situation
where a special RPC (a “oneway” call) would leave unwanted data on the underlying
Thrift connection. After this extra data was left on connection, all subsequent RPCs
re-using that connection would fail with “out of sequence response” error messages.
Accumulo would be left in a bad state until the mishandled connections were released
or Accumulo services were restarted. (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4065&quot;&gt;ACCUMULO-4065&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;other-notable-changes&quot;&gt;Other Notable Changes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3509&quot;&gt;ACCUMULO-3509&lt;/a&gt; Fixed some lock contention in TabletServer, preventing resource cleanup&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3734&quot;&gt;ACCUMULO-3734&lt;/a&gt; Fixed quote-escaping bug in VisibilityConstraint&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4025&quot;&gt;ACCUMULO-4025&lt;/a&gt; Fixed cleanup of bulk load fate transactions&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4098&quot;&gt;ACCUMULO-4098&lt;/a&gt;,&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4113&quot;&gt;ACCUMULO-4113&lt;/a&gt; Fixed widespread misuse of ByteBuffer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;Each unit and functional test only runs on a single node, while the RandomWalk
and Continuous Ingest tests run on any number of nodes. &lt;em&gt;Agitation&lt;/em&gt; refers to
randomly restarting Accumulo processes and Hadoop Datanode processes, and, in
HDFS High-Availability instances, forcing NameNode failover.&lt;/p&gt;

&lt;table id=&quot;release_notes_testing&quot; class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;OS/Environment&lt;/th&gt;
      &lt;th&gt;Hadoop&lt;/th&gt;
      &lt;th&gt;Nodes&lt;/th&gt;
      &lt;th&gt;ZooKeeper&lt;/th&gt;
      &lt;th&gt;HDFS HA&lt;/th&gt;
      &lt;th&gt;Tests&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS 7.1 w/Oracle JDK8 on EC2 (1 m3.xlarge, 8 d2.xlarge)&lt;/td&gt;
      &lt;td&gt;2.6.3&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;3.4.6&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Random walk (All.xml) 24-hour run, saw &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3794&quot;&gt;ACCUMULO-3794&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4151&quot;&gt;ACCUMULO-4151&lt;/a&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS 7.1 w/Oracle JDK8 on EC2 (1 m3.xlarge, 8 d2.xlarge)&lt;/td&gt;
      &lt;td&gt;2.6.3&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;3.4.6&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;21 hr run of CI w/ agitation, 23.1B entries verified.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS 7.1 w/Oracle JDK8 on EC2 (1 m3.xlarge, 8 d2.xlarge)&lt;/td&gt;
      &lt;td&gt;2.6.3&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;3.4.6&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;24 hr run of CI w/o agitation, 23.0B entries verified; saw performance issues outlined in comment on &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4146&quot;&gt;ACCUMULO-4146&lt;/a&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS 6.7 (OpenJDK 7), Fedora 23 (OpenJDK 8), and CentOS 7.2 (OpenJDK 7)&lt;/td&gt;
      &lt;td&gt;2.6.1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3.4.6&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;All unit tests and ITs pass with -Dhadoop.version=2.6.1; Kerberos ITs had a problem with earlier versions of Hadoop&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Fri, 26 Feb 2016 00:00:00 -0500</pubDate>
        <link>https://accumulo.apache.org/release/accumulo-1.7.1/</link>
        <guid isPermaLink="true">https://accumulo.apache.org/release/accumulo-1.7.1/</guid>
        
        
        <category>release</category>
        
      </item>
    
      <item>
        <title>Apache Accumulo 1.6.5</title>
        <description>&lt;p&gt;Apache Accumulo 1.6.5 is a maintenance release on the 1.6 version branch. This
release contains changes from 55 issues, comprised of bug-fixes, performance
improvements, build quality improvements, and more. See &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO/fixforversion/12333674&quot;&gt;JIRA&lt;/a&gt; for a
complete list.&lt;/p&gt;

&lt;p&gt;Below are resources for this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/1.6/accumulo_user_manual.html&quot;&gt;User Manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.6/apidocs&quot;&gt;Javadocs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.6/examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Users of any previous 1.6.x release are strongly encouraged to update as soon as
possible to benefit from the improvements with very little concern in change of
underlying functionality. Users of 1.4 or 1.5 that are seeking to upgrade to 1.6
should consider 1.6.5 as a starting point.&lt;/p&gt;

&lt;h2 id=&quot;outstanding-known-issues&quot;&gt;Outstanding Known Issues&lt;/h2&gt;

&lt;p&gt;Be aware that a small documentation bug exists with the compact command in the
shell (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4138&quot;&gt;ACCUMULO-4138&lt;/a&gt;). The documentation for the begin row and
end row should be described as exclusive and inclusive, respectively, rather
than the incorrect description of both being inclusive.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;h3 id=&quot;queued-compactions-not-running&quot;&gt;Queued Compactions Not Running&lt;/h3&gt;

&lt;p&gt;Found and fixed a bug (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4016&quot;&gt;ACCUMULO-4016&lt;/a&gt;) in which some queued
compactions would never run if the number of files changed while the tablet was
queued.&lt;/p&gt;

&lt;h3 id=&quot;faster-processing-of-conditional-mutations&quot;&gt;Faster Processing of Conditional Mutations&lt;/h3&gt;

&lt;p&gt;Improved ConditionalMutation processing time by a factor of 3.
(&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4066&quot;&gt;ACCUMULO-4066&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;slow-gc-while-bulk-importing&quot;&gt;Slow GC While Bulk Importing&lt;/h3&gt;

&lt;p&gt;Found and worked around an issue where lots of bulk imports creating many new
files would significantly impair the Accumulo GC service, and possibly prevent
it from running to completion entirely. (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4021&quot;&gt;ACCUMULO-4021&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;improvements-in-locating-client-configuration-file&quot;&gt;Improvements in Locating Client Configuration File&lt;/h3&gt;

&lt;p&gt;Fixed some unexpected error messages related to setting
ACCUMULO_CLIENT_CONF_PATH, and improved the detection of the client.conf file if
ACCUMULO_CLIENT_CONF_PATH was set to a directory containing client.conf.
(&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4026&quot;&gt;ACCUMULO-4026&lt;/a&gt;,&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4027&quot;&gt;ACCUMULO-4027&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;transient-zookeeper-disconnect-causes-fate-threads-to-exit&quot;&gt;Transient ZooKeeper disconnect causes FATE threads to exit&lt;/h3&gt;

&lt;p&gt;ZooKeeper clients are expected to handle the situation where they become
disconnected from the ZooKeeper server and must wait to be reconnected
before continuing ZooKeeper operations.&lt;/p&gt;

&lt;p&gt;The dedicated threads running inside the Accumulo Master process for FATE
actions had the potential unexpectedly exit in this disconnected state.
This caused a scenario where all future FATE-based operations would
be blocked until the Accumulo Master process was restarted. (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4060&quot;&gt;ACCUMULO-4060&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;incorrect-management-of-certain-apache-thrift-rpcs&quot;&gt;Incorrect management of certain Apache Thrift RPCs&lt;/h3&gt;

&lt;p&gt;Accumulo relies on Apache Thrift to implement remote procedure calls between
Accumulo services. Accumulo’s use of Thrift uncovered an unfortunate situation
where a special RPC (a “oneway” call) would leave unwanted data on the underlying
Thrift connection. After this extra data was left on connection, all subsequent RPCs
re-using that connection would fail with “out of sequence response” error messages.
Accumulo would be left in a bad state until the mishandled connections were released
or Accumulo services were restarted. (&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4065&quot;&gt;ACCUMULO-4065&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;other-notable-changes&quot;&gt;Other Notable Changes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3509&quot;&gt;ACCUMULO-3509&lt;/a&gt; Fixed some lock contention in TabletServer, preventing resource cleanup&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3734&quot;&gt;ACCUMULO-3734&lt;/a&gt; Fixed quote-escaping bug in VisibilityConstraint&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4025&quot;&gt;ACCUMULO-4025&lt;/a&gt; Fixed cleanup of bulk load fate transactions&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4070&quot;&gt;ACCUMULO-4070&lt;/a&gt; Fixed Kerberos ticket renewal for all Accumulo services&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4098&quot;&gt;ACCUMULO-4098&lt;/a&gt;,&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-4113&quot;&gt;ACCUMULO-4113&lt;/a&gt; Fixed widespread misuse of ByteBuffer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;Each unit and functional test only runs on a single node, while the RandomWalk
and Continuous Ingest tests run on any number of nodes. &lt;em&gt;Agitation&lt;/em&gt; refers to
randomly restarting Accumulo processes and Hadoop Datanode processes, and, in
HDFS High-Availability instances, forcing NameNode failover.&lt;/p&gt;

&lt;table id=&quot;release_notes_testing&quot; class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;OS&lt;/th&gt;
      &lt;th&gt;Hadoop&lt;/th&gt;
      &lt;th&gt;Nodes&lt;/th&gt;
      &lt;th&gt;ZooKeeper&lt;/th&gt;
      &lt;th&gt;HDFS HA&lt;/th&gt;
      &lt;th&gt;Tests&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS 7.1&lt;/td&gt;
      &lt;td&gt;2.6.3&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;3.4.6&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Random walk (All.xml) 18-hour run (2 failures, both conflicting operations on same table in Concurrent test)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS 7.1&lt;/td&gt;
      &lt;td&gt;2.6.3&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;3.4.6&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Continuous ingest with agitation (2B entries)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS 6.7&lt;/td&gt;
      &lt;td&gt;2.2.0 and 1.2.1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3.3.6&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;All unit and integration tests&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS 7.1 (Oracle JDK8)&lt;/td&gt;
      &lt;td&gt;2.6.3&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;3.4.6&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Continuous ingest with agitation (24hrs, 32B entries verified) on EC2 (1 m3.xlarge leader; 8 d2.xlarge workers)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Wed, 17 Feb 2016 00:00:00 -0500</pubDate>
        <link>https://accumulo.apache.org/release/accumulo-1.6.5/</link>
        <guid isPermaLink="true">https://accumulo.apache.org/release/accumulo-1.6.5/</guid>
        
        
        <category>release</category>
        
      </item>
    
      <item>
        <title>Apache Accumulo 1.6.4</title>
        <description>&lt;p&gt;Apache Accumulo 1.6.4 is a maintenance release on the 1.6 version branch.
This release contains changes from 21 issues, comprised of bug-fixes,
performance improvements and better test cases. See &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO/fixforversion/12332840&quot;&gt;JIRA&lt;/a&gt; for a
complete list.&lt;/p&gt;

&lt;p&gt;Below are resources for this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/1.6/accumulo_user_manual.html&quot;&gt;User Manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.6/apidocs&quot;&gt;Javadocs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.6/examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Users of any previous 1.6.x release are strongly encouraged to update as soon as
possible to benefit from the improvements with very little concern in change
of underlying functionality. Users of 1.4 or 1.5 that are seeking to upgrade
to 1.6 should consider 1.6.4 as a starting point.&lt;/p&gt;

&lt;h2 id=&quot;silent-data-loss-via-bulk-imported-files&quot;&gt;Silent data-loss via bulk imported files&lt;/h2&gt;

&lt;p&gt;A user recently reported that a simple bulk-import application would occasionally
lose some records. Through investigation, it was found that when bulk imports into
a table failed the initial assignment, the logic that automatically retries the
imports was incorrectly choosing the tablets to import the files into. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3967&quot;&gt;ACCUMULO-3967&lt;/a&gt;
contains more information on the cause and identification of the bug. The data-loss
condition would only affect entire files. If records from a file exist in Accumulo,
it is still guaranteed that all records within that imported file were successful.&lt;/p&gt;

&lt;p&gt;As such, users who have bulk import applications using previous versions of Accumulo
should verify that all of their data was correctly ingested into Accumulo and
immediately update to Accumulo 1.6.4.&lt;/p&gt;

&lt;h2 id=&quot;other-bug-fixes&quot;&gt;Other bug fixes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3979&quot;&gt;ACCUMULO-3979&lt;/a&gt; Fixed an issue where the BulkImporter failed
with an error message “QUERY_METADATA already started”.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3965&quot;&gt;ACCUMULO-3965&lt;/a&gt; The &lt;code class=&quot;highlighter-rouge&quot;&gt;listscans&lt;/code&gt; shell command did not contain
the &lt;code class=&quot;highlighter-rouge&quot;&gt;scanId&lt;/code&gt; attribute for currently running scans.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3946&quot;&gt;ACCUMULO-3946&lt;/a&gt; Verified that all user-facing operations contained
appropriate audit messages.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3977&quot;&gt;ACCUMULO-3977&lt;/a&gt; Isolated scans with Iterators in use incorrectly
fail around invocation of &lt;code class=&quot;highlighter-rouge&quot;&gt;deepCopy&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3905&quot;&gt;ACCUMULO-3905&lt;/a&gt; RowDeletingIterator functions incorrectly when
columns are provided by the client. This restores intended functionality without
the need for a &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-1801?focusedCommentId=13970204&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13970204&quot;&gt;workaround&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3959&quot;&gt;ACCUMULO-3959&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3934&quot;&gt;ACCUMULO-3934&lt;/a&gt; Multiple documentation
improvements to &lt;code class=&quot;highlighter-rouge&quot;&gt;BatchScanner&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;Each unit and functional test only runs on a single node, while the RandomWalk
and Continuous Ingest tests run on any number of nodes. &lt;em&gt;Agitation&lt;/em&gt; refers to
randomly restarting Accumulo processes and Hadoop Datanode processes, and, in
HDFS High-Availability instances, forcing NameNode failover.&lt;/p&gt;

&lt;table id=&quot;release_notes_testing&quot; class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;OS&lt;/th&gt;
      &lt;th&gt;Hadoop&lt;/th&gt;
      &lt;th&gt;Nodes&lt;/th&gt;
      &lt;th&gt;ZooKeeper&lt;/th&gt;
      &lt;th&gt;HDFS HA&lt;/th&gt;
      &lt;th&gt;Tests&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Amazon Linux 2014.09&lt;/td&gt;
      &lt;td&gt;2.6.0&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;3.4.5&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;ContinuousIngest w/ verification w/ and w/o agitation (37B entries)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Sat, 03 Oct 2015 00:00:00 -0400</pubDate>
        <link>https://accumulo.apache.org/release/accumulo-1.6.4/</link>
        <guid isPermaLink="true">https://accumulo.apache.org/release/accumulo-1.6.4/</guid>
        
        
        <category>release</category>
        
      </item>
    
      <item>
        <title>Apache Accumulo 1.5.4</title>
        <description>&lt;p&gt;Apache Accumulo 1.5.4 is one more bug-fix release for the 1.5 series. Like 1.5.3 before it, this release contains a
very small changeset when considering the normal size of changes in a release.&lt;/p&gt;

&lt;p&gt;Below are resources for this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/1.5/accumulo_user_manual.html&quot;&gt;User Manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.5/apidocs&quot;&gt;Javadocs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.5/examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This release contains no changes to the &lt;a href=&quot;https://github.com/apache/accumulo/blob/1.7.0/README.md#api&quot;&gt;public API&lt;/a&gt;. As such, there are no concerns
for the compatibility of user code running against 1.5.3. All users are encourage to upgrade
immediately without concern of stability and compatibility.&lt;/p&gt;

&lt;p&gt;A full list of changes is available via &lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12312121&amp;amp;version=12333106&quot;&gt;CHANGES&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’d like to thank all of the committers and contributors which had a part in
making this release, from code contributions to testing. Everyone’s efforts are
greatly appreciated.&lt;/p&gt;

&lt;h2 id=&quot;correctness-bugs&quot;&gt;Correctness Bugs&lt;/h2&gt;

&lt;h3 id=&quot;silent-data-loss-via-bulk-imported-files&quot;&gt;Silent data-loss via bulk imported files&lt;/h3&gt;

&lt;p&gt;A user recently reported that a simple bulk-import application would occasionally lose some records. Through investigation,
it was found that when bulk imports into a table failed the initial assignment, the logic that automatically retries
the imports was incorrectly choosing the tablets to import the files into. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3967&quot;&gt;ACCUMULO-3967&lt;/a&gt; contains
more information on the cause and identification of the bug. The data-loss condition would only affect entire files.
If records from a file exist in Accumulo, it is still guaranteed that all records within that imported file were
successful.&lt;/p&gt;

&lt;p&gt;As such, users who have bulk import applications using previous versions of Accumulo should verify that all of their
data was correctly ingested into Accumulo and immediately update to Accumulo 1.5.4.&lt;/p&gt;

&lt;p&gt;Thanks to Edward Seidl for reporting this bug to us!&lt;/p&gt;

&lt;h2 id=&quot;server-side-auditing-changes&quot;&gt;Server-side auditing changes&lt;/h2&gt;

&lt;p&gt;Thanks to James Mello for reporting and providing the fixes to the following server-side auditing issues.&lt;/p&gt;

&lt;h3 id=&quot;incorrect-audit-initialization&quot;&gt;Incorrect audit initialization&lt;/h3&gt;

&lt;p&gt;It was observed that the implementation used to audit user API requests on Accumulo server processes
was not being correctly initialized which caused audit messages to never be generated. This was rectified
in &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3939&quot;&gt;ACCUMULO-3939&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;missing-audit-implementations&quot;&gt;Missing audit implementations&lt;/h3&gt;

&lt;p&gt;It was also observed that some server-side API implementations did not include audit messages which resulted
in an incomplete historical picture on what operations a user might have invoked. The missing audits (and those
that were added) are described in &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3946&quot;&gt;ACCUMULO-3946&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;Each unit and functional test only runs on a single node, while the RandomWalk
and Continuous Ingest tests run on any number of nodes. &lt;em&gt;Agitation&lt;/em&gt; refers to
randomly restarting Accumulo processes and Hadoop DataNode processes, and, in
HDFS High-Availability instances, forcing NameNode fail-over.&lt;/p&gt;

&lt;table id=&quot;release_notes_testing&quot; class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;OS&lt;/th&gt;
      &lt;th&gt;Hadoop&lt;/th&gt;
      &lt;th&gt;Nodes&lt;/th&gt;
      &lt;th&gt;ZooKeeper&lt;/th&gt;
      &lt;th&gt;HDFS High-Availability&lt;/th&gt;
      &lt;th&gt;Tests&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;OSX&lt;/td&gt;
      &lt;td&gt;2.6.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3.4.5&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Unit and Functional Tests&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Centos 6.5&lt;/td&gt;
      &lt;td&gt;2.7.1&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;3.4.5&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Continuous Ingest and Verify (10B entries), Randomwalk (24hrs)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Mon, 21 Sep 2015 00:00:00 -0400</pubDate>
        <link>https://accumulo.apache.org/release/accumulo-1.5.4/</link>
        <guid isPermaLink="true">https://accumulo.apache.org/release/accumulo-1.5.4/</guid>
        
        
        <category>release</category>
        
      </item>
    
      <item>
        <title>Apache Accumulo 1.5.2</title>
        <description>&lt;p&gt;Apache Accumulo 1.5.2 is a maintenance release on the 1.5 version branch.
This release contains changes from over 100 issues, comprised of bug fixes
(client side and server side), new test cases, and updated Hadoop support
contributed by over 30 different contributors and committers.&lt;/p&gt;

&lt;p&gt;Below are resources for this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/1.5/accumulo_user_manual.html&quot;&gt;User Manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.5/apidocs&quot;&gt;Javadocs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/1.5/examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As this is a maintenance release, Apache Accumulo 1.5.2 has no client API 
incompatibilities over Apache Accumulo 1.5.0 and 1.5.1 and requires no manual upgrade 
process. Users of 1.5.0 or 1.5.1 are strongly encouraged to update as soon as possible 
to benefit from the improvements.&lt;/p&gt;

&lt;p&gt;Users who are new to Accumulo are encouraged to use a 1.6 release as opposed
to the 1.5 line as development has already shifted towards the 1.6 line. For those
who cannot or do not want to upgrade to 1.6, 1.5.2 is still an excellent choice
over earlier versions in the 1.5 line.&lt;/p&gt;

&lt;h2 id=&quot;performance-improvements&quot;&gt;Performance Improvements&lt;/h2&gt;

&lt;p&gt;Apache Accumulo 1.5.2 includes a number of performance-related fixes over previous versions.&lt;/p&gt;

&lt;h3 id=&quot;write-ahead-log-sync-performance&quot;&gt;Write-Ahead Log sync performance&lt;/h3&gt;

&lt;p&gt;The Write-Ahead Log (WAL) files are used to ensure durability of updates made to Accumulo.
A sync is called on the file in HDFS to make sure that the changes to the WAL are persisted
to disk, which allows Accumulo to recover in the case of failure. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2766&quot;&gt;ACCUMULO-2766&lt;/a&gt; fixed
an issue where an operation against a WAL would unnecessarily wait for multiple syncs, slowing
down the ingest on the system.&lt;/p&gt;

&lt;h3 id=&quot;minor-compactions-not-aggressive-enough&quot;&gt;Minor-Compactions not aggressive enough&lt;/h3&gt;

&lt;p&gt;On a system with ample memory provided to Accumulo, long hold-times were observed which
blocks the ingest of new updates. Trying to free more server-side memory by running minor
compactions more frequently increased the overall throughput on the node. These changes
were made in &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2905&quot;&gt;ACCUMULO-2905&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;heapiterator-optimization&quot;&gt;HeapIterator optimization&lt;/h3&gt;

&lt;p&gt;Iterators, a notable feature of Accumulo, are provided to users as a server-side programming
construct, but are also used internally for numerous server operations. One of these system iterator 
is the HeapIterator which implements a PriorityQueue of other Iterators. One way this iterator is
used is to merge multiple files in HDFS to present a single, sorted stream of Key-Value pairs. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2827&quot;&gt;ACCUMULO-2827&lt;/a&gt;
introduces a performance optimization to the HeapIterator which can improve the speed of the
HeapIterator in common cases.&lt;/p&gt;

&lt;h3 id=&quot;write-ahead-log-sync-implementation&quot;&gt;Write-Ahead log sync implementation&lt;/h3&gt;

&lt;p&gt;In Hadoop-2, two implementations of sync are provided: hflush and hsync. Both of these
methods provide a way to request that the datanodes write the data to the underlying
medium and not just hold it in memory (the &lt;em&gt;fsync&lt;/em&gt; syscall). While both of these methods
inform the Datanodes to sync the relevant block(s), &lt;em&gt;hflush&lt;/em&gt; does not wait for acknowledgement
from the Datanodes that the sync finished, where &lt;em&gt;hsync&lt;/em&gt; does. To provide the most reliable system
“out of the box”, Accumulo defaults to &lt;em&gt;hsync&lt;/em&gt; so that your data is as secure as possible in 
a variety of situations (notably, unexpected power outages).&lt;/p&gt;

&lt;p&gt;The downside is that performance tends to suffer because waiting for a sync to disk is a very
expensive operation. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2842&quot;&gt;ACCUMULO-2842&lt;/a&gt; introduces a new system property, tserver.wal.sync.method,
that lets users to change the HDFS sync implementation from &lt;em&gt;hsync&lt;/em&gt; to &lt;em&gt;hflush&lt;/em&gt;. Using &lt;em&gt;hflush&lt;/em&gt; instead
of &lt;em&gt;hsync&lt;/em&gt; may result in about a 30% increase in ingest performance.&lt;/p&gt;

&lt;p&gt;For users upgrading from Hadoop-1 or Hadoop-0.20 releases, &lt;em&gt;hflush&lt;/em&gt; is the equivalent of how
sync was implemented in these older versions of Hadoop and should give comparable performance.&lt;/p&gt;

&lt;h3 id=&quot;server-side-mutation-queue-size&quot;&gt;Server-side mutation queue size&lt;/h3&gt;

&lt;p&gt;When users desire writes to be as durable as possible, using &lt;em&gt;hsync&lt;/em&gt;, the ingest performance
of the system can be improved by increasing the tserver.mutation.queue.max property. The cost
of this change is that it will cause TabletServers to use additional memory per writer. In 1.5.1,
the value of this parameter defaulted to a conservative 256K, which resulted in sub-par ingest
performance.&lt;/p&gt;

&lt;p&gt;1.5.2 and &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3018&quot;&gt;ACCUMULO-3018&lt;/a&gt; increases this buffer to 1M which has a noticeable positive impact on
ingest performance with a minimal increase in TabletServer memory usage.&lt;/p&gt;

&lt;h2 id=&quot;notable-bug-fixes&quot;&gt;Notable Bug Fixes&lt;/h2&gt;

&lt;h3 id=&quot;fixes-mapreduce-package-name-change&quot;&gt;Fixes MapReduce package name change&lt;/h3&gt;

&lt;p&gt;1.5.1 inadvertently included a change to RangeInputSplit which created an incompatibility
with 1.5.0. The original class has been restored to ensure that users accessing
the RangeInputSplit class do not have to alter their client code. See &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2586&quot;&gt;ACCUMULO-2586&lt;/a&gt; for
more information&lt;/p&gt;

&lt;h3 id=&quot;add-configurable-maximum-frame-size-to-apache-thrift-proxy&quot;&gt;Add configurable maximum frame size to Apache Thrift proxy&lt;/h3&gt;

&lt;p&gt;The Thrift proxy server was subject to memory exhaustion, typically
due to bad input, where the server would attempt to allocate a very large
buffer and die in the process. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2658&quot;&gt;ACCUMULO-2658&lt;/a&gt; introduces a configuration
parameter, like &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2360&quot;&gt;ACCUMULO-2360&lt;/a&gt;, to prevent this error.&lt;/p&gt;

&lt;h3 id=&quot;offline-tables-can-prevent-tablet-balancing&quot;&gt;Offline tables can prevent tablet balancing&lt;/h3&gt;

&lt;p&gt;Before 1.5.2, when a table with many tablets was created, ingested into, and
taken offline, tablet balancing may have stoppped. This would happen if there
were tablet migrations for the table, because the migrations couldn’t occur.
The balancer will not run when there are outstanding migrations; therefore, a
system could become unbalanced. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2694&quot;&gt;ACCUMULO-2694&lt;/a&gt; introduces a fix to ensure
that offline tables do not block balancing and improves the server-side
logging.&lt;/p&gt;

&lt;h3 id=&quot;miniaccumulocluster-process-management&quot;&gt;MiniAccumuloCluster process management&lt;/h3&gt;

&lt;p&gt;MiniAccumuloCluster had a few issues which could cause deadlock or a method that
never returns. Most of these are related to management of the Accumulo processes
(&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2764&quot;&gt;ACCUMULO-2764&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2985&quot;&gt;ACCUMULO-2985&lt;/a&gt;, and &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3055&quot;&gt;ACCUMULO-3055&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;iteratorsettings-not-correctly-serialized-in-rangeinputsplit&quot;&gt;IteratorSettings not correctly serialized in RangeInputSplit&lt;/h3&gt;

&lt;p&gt;The Writable interface methods on the RangeInputSplit class accidentally omitted
calls to serialize the IteratorSettings configured for the Job. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2962&quot;&gt;ACCUMULO-2962&lt;/a&gt;
fixes the serialization and adds some additional tests.&lt;/p&gt;

&lt;h3 id=&quot;constraint-violation-causes-hung-scans&quot;&gt;Constraint violation causes hung scans&lt;/h3&gt;

&lt;p&gt;A failed bulk import transaction had the ability to create an infinitely retrying
loop due to a constraint violation. This directly prevents scans from completing,
but will also hang compactions. &lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3096&quot;&gt;ACCUMULO-3096&lt;/a&gt; fixes the issue so that the
constraint no longer hangs the entire system.&lt;/p&gt;

&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;

&lt;p&gt;The following documentation updates were made:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2540&quot;&gt;ACCUMULO-2540&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2767&quot;&gt;ACCUMULO-2767&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2796&quot;&gt;ACCUMULO-2796&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2443&quot;&gt;ACCUMULO-2443&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3008&quot;&gt;ACCUMULO-3008&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2919&quot;&gt;ACCUMULO-2919&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2874&quot;&gt;ACCUMULO-2874&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2653&quot;&gt;ACCUMULO-2653&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2437&quot;&gt;ACCUMULO-2437&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-3097&quot;&gt;ACCUMULO-3097&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-2499&quot;&gt;ACCUMULO-2499&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ACCUMULO-1669&quot;&gt;ACCUMULO-1669&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;Each unit and functional test only runs on a single node, while the RandomWalk and Continuous Ingest tests run 
on any number of nodes. &lt;em&gt;Agitation&lt;/em&gt; refers to randomly restarting Accumulo processes and Hadoop Datanode processes,
and, in HDFS High-Availability instances, forcing NameNode failover.&lt;/p&gt;

&lt;table id=&quot;release_notes_testing&quot; class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;OS&lt;/th&gt;
      &lt;th&gt;Hadoop&lt;/th&gt;
      &lt;th&gt;Nodes&lt;/th&gt;
      &lt;th&gt;ZooKeeper&lt;/th&gt;
      &lt;th&gt;HDFS High-Availability&lt;/th&gt;
      &lt;th&gt;Tests&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Gentoo&lt;/td&gt;
      &lt;td&gt;Apache 2.6.0-SNAPSHOT&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Apache 3.4.5&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Unit and Functional Tests, ContinuousIngest w/ verification (1B entries)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CentOS 6&lt;/td&gt;
      &lt;td&gt;Apache 2.3.0&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;Apache 3.4.5&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;24/hr RandomWalk, 24/hr ContinuousIngest w/ verification w/ and w/o agitation (30B and 23B entries)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Sat, 19 Sep 2015 00:00:00 -0400</pubDate>
        <link>https://accumulo.apache.org/release/accumulo-1.5.2/</link>
        <guid isPermaLink="true">https://accumulo.apache.org/release/accumulo-1.5.2/</guid>
        
        
        <category>release</category>
        
      </item>
    
  </channel>
</rss>
